# -*- coding: utf-8 -*-
"""
Created on Wed Jun  4 16:33:06 2025
@author: Admin
AES-128
"""
# 1 word is 1 byte
sbox = [
    # 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,  # 0
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,  # 1
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,  # 2
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,  # 3
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,  # 4
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,  # 5
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,  # 6
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,  # 7
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,  # 8
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,  # 9
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,  # A
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,  # B
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,  # C
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,  # D
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,  # E
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16   # F
]

# gets number
def split_bytes(x):
    # returns list of bytes (most significant to least significant)
    return [(x >> (8 * (15 - i))) & 0xFF for i in range(16)]

# inverse operation 
def join_bytes(byte_list):
    result = 0
    for b in byte_list:
        result = (result << 8) | b
    return result

# placing bytes in the matrix, column-firtst
def bytes_to_matrix(b):
    return [[b[4 * c + r] for r in range(4)] for c in range(4)]

#inverse operation
def matrix_to_bytes(m):
    return [m[r][c] for c in range(4) for r in range(4)]


def add_round_key(state, key_matrix):
    for r in range(4):
        for c in range(4):
            state[r][c] ^= key_matrix[r][c]
    return state

def sub_bytes(state):
    for r in range(4):
        for c in range(4):
            state[r][c] = sbox[state[r][c]]
    return state

def shift_rows(state):
    # row 0 unchanged
    for r in range(1, 4):
        row = [state[r][c] for c in range(4)] # get row
        row = row[r:] + row[:r] # shift left by r
        for c in range(4):
            state[r][c] = row[c] #update matrix
    return state

def mix_columns(state):
# MixColumns defined over GF(2^8), with fixed matrix multiplication
    def gf8_mult(a, b):
        IRR_POLY = 0b100011011  # x^8 + x^4 + x^3 + x + 1 irreductible polynomial in GF(2^8)
        res = 0
        for i in range(8): # perform polynomial multiplication
            if (b >> i) & 1:
                res ^= a << i
        for i in range(15, 7, -1):  # reduce from degree 15 down to 8
            if (res >> i) & 1:
                res ^= IRR_POLY << (i - 8)
        return res & 0xFF
    
    for c in range(4):
        col = [state[r][c] for r in range(4)] # get each column

        state[0][c] = gf8_mult(2, col[0]) ^ gf8_mult(3, col[1]) ^ col[2] ^ col[3]
        state[1][c] = col[0] ^ gf8_mult(2, col[1]) ^ gf8_mult(3, col[2]) ^ col[3]
        state[2][c] = col[0] ^ col[1] ^ gf8_mult(2, col[2]) ^ gf8_mult(3, col[3])
        state[3][c] = gf8_mult(3, col[0]) ^ col[1] ^ col[2] ^ gf8_mult(2, col[3])
    return state
        
def aes_encrypt_block(plaintext, key):
    state = bytes_to_matrix(split_bytes(plaintext))
    round_key = bytes_to_matrix(split_bytes(key))

    state = add_round_key(state, round_key)

    for round in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_key)  # same key each round

    # Final round (no MixColumns)
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_key)

    return join_bytes(matrix_to_bytes(state))


#Example usage (nr in 16 bytes - hexa format)
# 4 bits - 1 hexa decimal
# 8 bits - 1 byte - 2 hexa decimals 
plaintext = 0x00112233445566778899aabbccddeeff
key       = 0x0f1571c947d9e8590cb7add6af7f6798

ciphertext = aes_encrypt_block(plaintext, key)

print(f"Plaintext:  0x{plaintext:032X}")
print(f"Ciphertext: 0x{ciphertext:032X}")